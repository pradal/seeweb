{% extends "templates/ro/layout_view_min.jinja2" %}

{% block ro_view_body -%}

<div class="btn btn-default">
    <label>
        <input id="toggle_mouse_capture" type="checkbox"/>
        Capture mouse in 3d window
    </label>
</div>

<div id="scene3d_canvas">
</div>

{%- endblock %}


{% block ro_view_js -%}
    <script type="text/javascript" src="{{ request.static_url('seeweb:ro/scene3d/static/three.min.js') }}"></script>
    <script type="text/javascript" src="{{ request.static_url('seeweb:ro/scene3d/static/TrackballControls.js') }}"></script>

    <script>
        var container;
        var camera, controls, scene, renderer;

        $(function() {
            $('#toggle_mouse_capture').change(function() {
                if ($('#toggle_mouse_capture').prop('checked')) {
                    window.addEventListener('DOMMouseScroll',wheel,false);
                    controls.addEventListener( 'change', render );
                } else {
                    window.removeEventListener('DOMMouseScroll', wheel);
                    controls.removeEventListener( 'change', render );
                }
            })
          })


        init();
        animate();

        function init() {
            container = document.getElementById('scene3d_canvas');
            container.style.width = '800px';
            container.style.height = '600px';

            camera = new THREE.PerspectiveCamera( 70, 800 / 600, 1, 10000 );
            camera.position.z = 50;

            controls = new THREE.TrackballControls( camera );

            controls.rotateSpeed = 1.0;
            controls.zoomSpeed = 1.2;
            controls.panSpeed = 0.8;

            controls.noZoom = false;
            controls.noPan = false;

            controls.staticMoving = true;
            controls.dynamicDampingFactor = 0.3;

            controls.keys = [ 65, 83, 68 ];


            scene = new THREE.Scene();

            var light = new THREE.DirectionalLight( 0xffffff, 1 );
            light.position.set( 1, 1, 1 ).normalize();
            scene.add( light );

            var loader = new THREE.ObjectLoader();
            var mesh = loader.parse({{ scene }});
            if (mesh.type == "Scene") {
                for (i in mesh.children) {
                    scene.add(mesh.children[i]);
                }
            } else {
                scene.add(mesh);
            }

            renderer = new THREE.WebGLRenderer();
            renderer.setClearColor( 0xf0f0f0 );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( 800, 600 );
            renderer.sortObjects = false;
            container.appendChild(renderer.domElement);


            window.addEventListener( 'resize', onWindowResize, false );

            render();
        }

        function wheel(event)
        {
            event.preventDefault();
            event.returnValue=false;
        }

        function onWindowResize() {
                camera.aspect = 800 / 600.;
                camera.updateProjectionMatrix();

                renderer.setSize( 800, 600 );

                controls.handleResize();

                render();
            }

        function animate() {
            requestAnimationFrame( animate );
            controls.update();
        }

        function render() {
            renderer.render( scene, camera );
        }
</script>

{%- endblock %}
