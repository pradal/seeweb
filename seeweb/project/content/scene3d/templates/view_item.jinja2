{% extends "templates/project/layout_content.jinja2" %}

{% block project_content_body -%}
<div>
    <p id="debug">debug</p>
</div>

<div id="scene3d_canvas">
</div>

{%- endblock %}


{% block project_js -%}
    <script type="text/javascript" src="{{ request.static_url('seeweb:project/content/scene3d/static/three.min.js') }}"></script>

    <script>
        var container;
        var camera, scene, raycaster, renderer;

        var mouse = new THREE.Vector2(), INTERSECTED;
        mouse.x = -100;
        mouse.y = -100;
        var radius = 100, theta = 0;

        init();
        animate();

        function init() {
            container = document.getElementById('scene3d_canvas');
            container.style.width = '800px';
            container.style.height = '600px';

            camera = new THREE.PerspectiveCamera( 70, 800 / 600, 1, 10000 );

            scene = new THREE.Scene();

            var light = new THREE.DirectionalLight( 0xffffff, 1 );
            light.position.set( 1, 1, 1 ).normalize();
            scene.add( light );

            var loader = new THREE.ObjectLoader();
            var mesh = loader.parse(JSON.parse('{{ cnt_item.definition|safe }}'));
            if (mesh.type == "Scene") {
                for (i in mesh.children) {
                    $("#debug").text(i);
                    scene.add(mesh.children[i]);
                }
            } else {
                scene.add(mesh);
            }
            //$("#debug").text(mesh.type);


            raycaster = new THREE.Raycaster();

            renderer = new THREE.WebGLRenderer();
            renderer.setClearColor( 0xf0f0f0 );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( 800, 600 );
            renderer.sortObjects = false;
            container.appendChild(renderer.domElement);

            document.addEventListener( 'mousemove', onDocumentMouseMove, false );

            //

            window.addEventListener( 'resize', onWindowResize, false );

        }

        function onWindowResize() {

            //camera.aspect = window.innerWidth / window.innerHeight;
            //camera.updateProjectionMatrix();

            //renderer.setSize( window.innerWidth, window.innerHeight );

        }

        function onDocumentMouseMove( event ) {

            event.preventDefault();
            var rect = container.getBoundingClientRect();

            mouse.x = ( ( event.clientX - rect.left ) / 800 ) * 2 - 1;
            mouse.y = - ( (event.clientY - rect.top ) / 600 ) * 2 + 1;

        }

        //

        function animate() {

            requestAnimationFrame( animate );

            render();

        }

        function render() {

            theta += 0.1;

            camera.position.x = radius * Math.sin( THREE.Math.degToRad( theta ) );
            camera.position.y = radius * Math.sin( THREE.Math.degToRad( theta ) );
            camera.position.z = radius * Math.cos( THREE.Math.degToRad( theta ) );
            camera.lookAt( scene.position );

            camera.updateMatrixWorld();

            // find intersections

            raycaster.setFromCamera( mouse, camera );

            var intersects = raycaster.intersectObjects( scene.children );

            if ( intersects.length > 0 ) {

                if ( INTERSECTED != intersects[ 0 ].object ) {

                    if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

                    INTERSECTED = intersects[ 0 ].object;
                    INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
                    INTERSECTED.material.emissive.setHex( 0xff0000 );

                }

            } else {

                if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

                INTERSECTED = null;

            }

            renderer.render( scene, camera );

        }
</script>

{%- endblock %}
